// This code has been updated to use the Landsat Collection 2 data (name 
// changes to the bands and includes a scaling factor and offset)
// The code doesn't harmonize L5 and L7 with L8 but the differences are 
// minimal. Especially for Collection 2.  

// Calculates median NDVI for months specified for specified years for 
// polygons, filters cloud, cloud shadow, and snow 

// If you want to check a specific point within the roi move the check point/geometry

// Inputs: a shapefile of roi, if you want you can also create a point named 
// "check" to validate a single point time series 

//define roi
var roi = matheson_V02//practiceFile//mathesonUnits_Practice//ProjectAreas.filter(ee.Filter.eq("POLYGON","SE Grouse Creek Mts"))

//User defined parameters

var startMonth = 8
var endMonth = 9
var startYear = 1993
var endYear = 2022
var endDate = '2022-12-31' // used to filter Landsat 8 image collection line 121
var cloudROIPercentThreshold = 10 //what percent of the roi can have clouds masked out and still be included in the average
var siteID = 'Unit' // column name of different polygon identifiers. 
var outputFileName = "Matheson_NDVI_Units_AugSept_V02"
var outputFolderName = "Matheson_2"
Map.addLayer(ee.Image().paint(roi, 1, 2), null, 'roi'); // <--- display and check wetPoly
//Map.addLayer(ee.Image().paint(ProjectAreas, 1, 2), null, 'Broad Project Areas')

//=== helper functions =====================================================

var bandRenamel8 = function(image){
  var rename = image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
  ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);
  return rename;
};

var bandRenamel57 = function(image){
  var rename = image.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'],
  ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);
  return rename;
};


var cloudMaskl8 = function(image){
  var quality =image.select(['QA_PIXEL']);
  // clear = no clouds, coud shadow, or snow-could also include dilated clouds but I'm not since the other Landats don't have that option
  var clear = quality.bitwiseAnd(16).eq(0) // cloud shadow
                .and(quality.bitwiseAnd(8).eq(0)) // cloud
                .and(quality.bitwiseAnd(32).eq(0)); // snow
  image = image.mask(clear);
  return image;
};  



function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}


var ndviCalc = function(x) {
  var ndvi = x.normalizedDifference(['B4', 'B3']);
  ndvi = ndvi.select([0], ['NDVI']);
  var imageDate = x.get('system:time_start');
  return ndvi.set('system:time_start', imageDate);
};// didn't use this function in this code, I did it manually

//filter by masked cloud cover
var get_cloud_cover_roi= function(image){ 

  var pixelscount = image.select('NDVI').reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: roi.geometry(),
    scale: 30,
    maxPixels: 1e9
  }).get('NDVI')

  var npix = image.select('NDVI').unmask().reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: roi.geometry(),
    scale: 30,
    maxPixels: 1e9
  }).get('NDVI')

  var cloud_cover_roi = ee.Number(1)
      .subtract(ee.Number(pixelscount).divide(npix))
      .multiply(100)

  return image.set('cloud_cover_roi', cloud_cover_roi)

}


//============================================================================
//    create imageCollection - filter landsat l5, l7, l8, and merge 
//============================================================================
{
var periodl5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(roi.geometry()) //geometry().//.bounds()
  .filter((ee.Filter.date('1984-01-01', '2011-12-31')))
  .map(cloudMaskl8)
  .map(applyScaleFactors)
  .map(bandRenamel57);
//print(periodl5, 'periodl5');

var periodl7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
    .filterBounds(roi.geometry()) //.bounds()
  .filter((ee.Filter.date('2012-01-01', '2012-12-31')))
  .map(cloudMaskl8)
  .map(applyScaleFactors)
  .map(bandRenamel57);
// print(periodl7, 'periodl7');

var periodl8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(roi.geometry()) //.bounds()
  .filter((ee.Filter.date('2013-01-01', endDate)))
  .map(cloudMaskl8)
  .map(applyScaleFactors)
  .map(bandRenamel8);
//print(periodl8, 'periodl8');

var period = ee.ImageCollection(periodl5.merge(periodl7).merge(periodl8)); 
// print (period);
}

//============================================================================
//    Calculate NDVI and take monthly median composite
//============================================================================
var ndvi = ee.ImageCollection(period)
  .filterDate(startYear.toString(), (endYear +1).toString())
  .filter(ee.Filter.calendarRange(startMonth,endMonth,'month'))//dayOfYear(196,243))//calendarRange(8,9,'month'))//
  .filter(ee.Filter.calendarRange(startYear,endYear,'year'))
  .select(['B3','B4'])
  .map(ndviCalc);

print(ndvi,'ndviCollection');//.limit(10)

var years = ee.List.sequence(startYear, endYear); 
print(years, 'years');

var ndviAnnual = ee.ImageCollection.fromImages(years.map(function(x){ 
  var yearCollection = ndvi
  .filter(ee.Filter.calendarRange(x, x, 'year'));
  // var date = ee.Date(yearCollection
  // .first()
  // .get('system:time_start'))
  // .format('YYYY');
  var time = yearCollection
  .first()
  .get('system:time_start');
  var yearNDVI = yearCollection
  .median()
  // .select([0], [ee.String('').cat(date)])
  .set({year:x})
  .set({'system:time_start':time});
  return yearNDVI;
  
})).map(get_cloud_cover_roi)
  .filterMetadata('cloud_cover_roi', 'less_than', cloudROIPercentThreshold) //the number is a percent
;

print(ndviAnnual, 'ndviAnnual');



//graph cloudless NDVI composite over time
var chart = ui.Chart.image.seriesByRegion(ndviAnnual, 
  roi, ee.Reducer.median(), 'NDVI',30,null,'Unit').setOptions({title: 'Cloud-masked NDVI over time polygon'});
print(chart); 





// take the image collection and take median NDVI value of the roi, change to feature collection for export
var NDVIMonthYearMedian = ndviAnnual//.filter(ee.Filter.neq('system:index','14')).filter(ee.Filter.neq('system:index','19')).filter(ee.Filter.neq('system:index','60'))//.filter(ee.Filter.and(ee.Filter.neq('system:index','1'),ee.Filter.neq('system:index','13')))
.map(function(x) {
  return x.reduceRegions({
    collection: roi,
    reducer: ee.Reducer.median(), // change reducer for different summary outputs **************************
    scale: 30,
    crs: 'EPSG:4326',
    tileScale: 1
  }).map(function(y){return y.set({'date': ee.Date(x.get('system:time_start'))})});
  }).flatten(); 
print(NDVIMonthYearMedian, 'NDVIMonthYearMedian');

//Export to google drive
Export.table.toDrive({
  folder: outputFolderName,
  collection: NDVIMonthYearMedian,
  description:outputFileName,
  selectors: ['system:index',"date",siteID,"median"],//'Shape_Area','Shape_Leng',
  fileFormat: 'CSV'
}); 

// extra chart that maps trend for specified "check" point/geometry
var chart =
    ui.Chart.image
        .series({//ByRegion
          imageCollection: ndviAnnual,
          //band: 'ndvi',
          region: check,
          reducer: ee.Reducer.median(),
          scale: 30,
          //seriesProperty: 'coordinates',
          xProperty: 'year'
        })

print(chart);
